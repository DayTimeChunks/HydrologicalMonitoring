scale_x_datetime(limits = lims, breaks = date_breaks("2 weeks"), labels = date_format("%b %d")) +
guides(col = guide_legend(nrow = 2, title.position = "top"))
out = out_dates +
theme(# axis.text.x=element_text(angle = 45, hjust = 1) ,
axis.text.x=element_blank(),
axis.title.x=element_blank(),
legend.position="right"
)
if (tags){
out + geom_text_repel(aes(label=Events), # WeekSubWeek or Weeks
size = 3,
arrow = arrow(length = unit(0.005, 'npc'), type = "closed"),
force = 0.5,
point.padding = unit(0.5, 'lines'),
max.iter = 2e3,
nudge_x = .05, show.legend = F)
}
out_dates
weeklySoil$Transect = as.character(weeklySoil$Transect)
weeklySoil$Transect = ifelse(weeklySoil$Transect == "N", "North",
ifelse(weeklySoil$Transect == "T", "Valley",
ifelse(weeklySoil$Transect == "S", "South", NA)
)
)
weeklySoil$Transect <- factor(weeklySoil$Transect, levels = c("North", "Valley", "South"))
levels( weeklySoil$Transect)
#, fig.height=3, fig.width=3}
lb1a2 <- paste("App.")
lbW012 <- paste("App.W0/1/2")
lbW9 <- paste("App.W9")
limits_conc_soil <- aes(ymin=Conc.mug.g.dry.soil-Conc.ComSoil.SD,  ymax=Conc.mug.g.dry.soil+Conc.ComSoil.SD)
#limits_conc_soil <- aes(ymin=mean-0.5, ymax=mean+0.5)
pd <- position_dodge(0.5) # move them .05 to the left and right
# xlims = xlim(as.POSIXct('2016-03-25 00:04:00', tz = 'EST'), as.POSIXct('2016-07-12 01:00:00', tz = 'EST') )
tags = FALSE
co = ggplot(weeklySoil[4:48, ],
aes(x=Date.ti, y=Conc.mug.g.dry.soil, colour=Transect, group = Transect)) +
geom_point() +
geom_line() +
# Error bars
geom_errorbar(limits_conc_soil, width=.1, position=pd) +
# scale_y_continuous(limits=c(0,10),oob = rescale_none) +
# Themes and axes
theme_minimal() +
theme(legend.position = "right",
# axis.text.x=element_text(angle = 45, hjust = 1),
# axis.text.x=element_blank(),
axis.title.x=element_blank()
) +
ylab(expression(atop("Conc. S-Meto. ", paste({({mu}*g / g.soil.dry)} )))) +
# facet_wrap(~Transect, nrow = 3) +
xlab("Date") +
# theme() +
# scale_x_datetime(breaks = date_breaks("1 weeks"), labels = date_format("%b %d")) +
# Smooth linear models
# stat_smooth(method = "lm", formula = y ~ poly(x, 2)) +
# stat_smooth(method = "lm") +
# Text
# W0 Application
# annotate("text", x = as.POSIXct('2016-03-25 08:04:00'), y = 4, label = lb1a2, parse = T, size = 3.0) +
geom_segment(aes(x = as.POSIXct('2016-04-14 08:04:00'), y = 0.5, xend = as.POSIXct('2016-03-26 01:04:00'), yend = -0), color = "black",
arrow = arrow(length = unit(0.2, "cm"))) +
# W1 Application
geom_segment(aes(x = as.POSIXct('2016-04-14 08:04:00'), y = 0.5,
xend = as.POSIXct('2016-04-05 08:04:00'), yend = 0), color = "black",
arrow = arrow(length = unit(0.2, "cm"))) +
# W2 Application
annotate("text", x = as.POSIXct('2016-04-15 08:04:00'), y = 1, label = lb1a2, parse = T, size = 3.0) +
geom_segment(aes(x = as.POSIXct('2016-04-14 08:04:00'), y = 0.5,
xend = as.POSIXct('2016-04-13 08:04:00'), yend = 0), color = "black",
arrow = arrow(length = unit(0.2, "cm"))) +
# W9 Application
annotate("text", x = as.POSIXct('2016-05-26 08:04:00'), y = 4.5, label = lb1a2, parse = T, size = 3.0) +
geom_segment(aes(x = as.POSIXct('2016-05-26 08:04:00'), y = 4,
xend = as.POSIXct('2016-05-26 08:04:00'), yend = 0), color = "black",
arrow = arrow(length = unit(0.2, "cm"))) +
guides(col = guide_legend(nrow = 3, title.position = "top")) +
scale_x_datetime(limits = lims, breaks = date_breaks("2 weeks"), labels = date_format("%b %d"))
if (tags){
co + geom_text_repel(aes(label=as.factor(Wnum)),
size = 3,
arrow = arrow(length = unit(0.005, 'npc'), type = "closed"),
force = 0.5,
point.padding = unit(0.5, 'lines'),
max.iter = 2e3,
nudge_x = .05,
show.legend = F)
}
co
# Linear model
# ggsave(co, filename = "CompositeConcLM.png", width = 7, height = 5, units = "in", scale = 1)
## ggsave(co, filename = "CompositeConcLM.tiff", height = 10, width = 8.7, units = 'cm')
# No linear model
# ggsave(co, filename = "CompositeConc.png", width = 7, height = 5, units = "in", scale = 1)
hy_noLeg <- hy + theme(legend.position = 'none')
out_noLeg = out +  theme(legend.position = 'none')
co_noLeg = co +  theme(legend.position = 'none')
out_leg <- get_legend(out)
co_leg <- get_legend(co)
grid1 = plot_grid(
hy_noLeg,
out_noLeg,
co_noLeg,
ncol = 1,
align = 'hv')
ml = ggdraw() +
draw_plot(grid1, x=0.02, y = 0.0, width = 0.95, height = .95) +
draw_plot(out_leg, x=(0.53 ), y = 0.44, width = .8, height = 0.1) +
draw_plot(co_leg, x=(0.53) , y = 0.11, width = .8, height = 0.1) +
draw_label("A", x= 0.94, y = .93, size = 12, fontface = "bold") +
draw_label("B", x= 0.94, y = .62, size = 12, fontface = "bold") +
draw_label("C", x= 0.94, y = .31, size = 12, fontface = "bold")
ml
SAVE = F
PC = F
if (SAVE){
if (PC){
ggsave(ml,
filename = "D:/Documents/these_pablo/WriteUp/WaterResearch/images/multilevel.pdf",
device = "pdf", dpi = 600,  scale = 1, # )# ,
width = 7, height = 11)
} else {
ggsave(ml,
filename = "/Users/DayTightChunks/Documents/PhD/Writeups/Journals/WaterResearch/images/multilevel.pdf",
device="pdf", dpi = 600,  scale = 1, # )# ,
width = 7, height = 11)
}
}
#ggsave(balAllplot, filename = "images/MB_CSIA_Bars.png", width = 8, height = 5, units = "in", scale = 1)
## convert plots to gtable objects
library(gtable)
library(grid) # low-level grid functions are required
g1 <- ggplotGrob(hy_noLeg)
# g1 <- gtable_add_cols(g1, unit(0,"mm")) # add a column for missing legend
g2 <- ggplotGrob(out_noLeg)
g3 <- ggplotGrob(co_noLeg)
# g <- rbind(g2, g3, size="first") # stack the two plots
g <- rbind(g1, g2, g3, size="first") # stack the two plots
g$widths <- unit.pmax(g1$widths, g2$widths, g3$widths) # use the largest widths
# center the legend vertically
# g$layout[grepl("guide", g$layout$name),c("t","b")] <- c(1,nrow(g))
grid.newpage()
grid.draw(g)
# Plot grid option, embedding different plot_grid 's
library(cowplot)
theme_set(theme_minimal())
embeds <-
plot_grid(
plot_grid(
hy_noLeg,
out_noLeg,
co_noLeg,
ncol = 1,
align = 'hv'),
plot_grid(
ggplot(),
out_leg,
co_leg,
ncol =1
), rel_widths = c(9,1)
)
# Water and soils transposed data
WaterSoils <- read.csv2("Data/WaterSoils_R.csv")
WaterSoils$Date.ti = as.POSIXct(strptime(WaterSoils$Date.ti,
"%Y-%m-%d %H:%M", tz="EST") )
sum(is.na(WaterSoils$Date.ti))
# View(WaterSoils)
# Concnetrations to plot as box plot
keepDDtest <- c(
"Date.ti",
"diss.d13C.x", # "DD13C.diss",
"comp.d13C.North", "comp.d13C.Talweg", "comp.d13C.South" #,
#"DD13C.North", "DD13C.Talweg", "DD13C.South"
)
ws <- WaterSoils[, colnames(WaterSoils) %in% keepDDtest]
ws <- melt(ws, id="Date.ti")
ws$Source <- ifelse(ws$variable == "diss.d13C.x" , "Outlet",
ifelse(ws$variable == "comp.d13C.South", "South",
ifelse(ws$variable == "comp.d13C.Talweg", "Valley",
ifelse(ws$variable == "comp.d13C.North", "North", NA
))))
ws$Season = ifelse(ws$Date.ti > as.POSIXct('2016-05-25 00:06:00', tz = 'EST'), "Late", "Early")
ws$Group4 <- ifelse(ws$variable == "diss.d13C.x" & # Outlet
ws$Date.ti > as.POSIXct('2016-05-25 00:06:00', tz = 'EST'), "Outlet(Late)",
ifelse(ws$variable == "diss.d13C.x" &
ws$Date.ti <= as.POSIXct('2016-05-25 00:06:00', tz = 'EST'), "Outlet(Early)",
# South
ifelse(ws$variable == "comp.d13C.South" &
ws$Date.ti < as.POSIXct('2016-05-25 00:06:00', tz = 'EST'), "South(Early)",
ifelse(ws$variable == "comp.d13C.South" &
ws$Date.ti > as.POSIXct('2016-05-25 00:06:00', tz = 'EST'), "South(Late)",
# Valley
ifelse(ws$variable == "comp.d13C.Talweg" &
ws$Date.ti < as.POSIXct('2016-05-25 00:06:00', tz = 'EST'), "Valley(Early)",
ifelse(ws$variable == "comp.d13C.Talweg" &
ws$Date.ti > as.POSIXct('2016-05-25 00:06:00', tz = 'EST'), "Valley(Late)",
# North
ifelse(ws$variable == "comp.d13C.North" &
ws$Date.ti < as.POSIXct('2016-05-25 00:06:00', tz = 'EST'), "North(Early)",
ifelse(ws$variable == "comp.d13C.North" &
ws$Date.ti > as.POSIXct('2016-05-25 00:06:00', tz = 'EST'), "North(Late)", NA
))))))))
ws$Source = factor(ws$Source, levels = c( "Outlet",  "Valley", "North", "South"))
levels(ws$Source)
ws$Source = as.factor(ws$Source)
sources <- ggplot(ws, aes(Source, value)) +
geom_boxplot(aes(colour=Season)) +
theme_minimal() +
# guides(col = guide_legend(nrow = 2)) +
#theme(axis.text.x=element_text(angle = 45, hjust = 1) ,
#axis.text.x=element_blank(),
#axis.title.x=element_blank(),
# legend.position="bottom"
#      )+
ylab(expression(paste({delta}^"13","C", ' (\u2030)')))
sources_big = sources + theme(text = element_text(size=17))
sources
late = subset(ws, Date.ti > as.POSIXct('2016-05-25 00:06:00', tz = 'EST'))
early = subset(ws, Date.ti <= as.POSIXct('2016-05-25 00:06:00', tz = 'EST'))
# Non-parameteric
# Reject Ho that pop. means are the same if low p-value
earlyGr4 <- kruskal.test(value ~ as.factor(Group4), data = early)
earlyGr4 # result is high p value, thus cannot reject that pop. are the same (therefore, no difference)
lateGr4 <- kruskal.test(value ~ as.factor(Group4), data = late)
lateGr4 # Low p-value, therefore reject Ho that groups are the same.
SAVE = F
PC = F
if (SAVE){
if (PC){
ggsave(sources,
filename = "D:/Documents/these_pablo/WriteUp/WaterResearch/images/boxplot.pdf",
device = "pdf", dpi = 600,  scale = 1, # )# ,
width = 8.7, height = 4)
} else {
ggsave(sources,
filename = "/Users/DayTightChunks/Documents/PhD/Writeups/Journals/WaterResearch/images/boxplot.pdf",
device=cairo_pdf, dpi = 600,  scale = 1, # )# ,
width = 8.7, height = 4)
}
}
getwd()
setwd("/Users/DayTightChunks/Documents/PhD/HydrologicalMonitoring")
getwd()
dat = read.csv2("Data/WaterSoils_R.csv", header = TRUE)
View(dat)
if (!require("devtools")) install.packages("devtools")
devtools::install_github("rstudio/rmarkdown")
Sys.setlocale("LC_ALL", "English")
# Plotting functions
library("scales")
library("tidyr")
library("dplyr")
library("reshape")
# setwd("D:/Documents/these_pablo/Alteckendorf2016/R")
# setwd("/Users/DayTightChunks/Documents/PhD/Routput/Alteck/R")
getwd()
rain = read.csv2("Data/sixMinutePluvioAlteck2016.csv", header = F)
head(rain)
rain$V1 <- as.character(rain$V1)
rain$Date = as.POSIXct(strptime(rain$V1,
"%d/%m/%Y %H:%M", tz="EST") )
rain = read.csv2("Data/sixMinutePluvioAlteck2016.csv", header = F)
head(rain)
rain$V1 <- as.character(rain$V1)
rain$Date = as.POSIXct(strptime(rain$V1,
"%d/%m/%Y %H:%M", tz="EST") )
rain$DailyRain = as.POSIXct(strptime(rain$V1,
"%d/%m/%Y", tz="EST")  )
View(rain)
rain = read.csv2("Data/sixMinutePluvioAlteck2016.csv", header = F)
head(rain)
rain$V1 <- as.character(rain$V1)
rain$Date = as.POSIXct(strptime(rain$V1,
"%d/%m/%Y %H:%M", tz="EST") )
rain$DayMoYr = as.POSIXct(strptime(rain$V1,
"%d/%m/%Y", tz="EST")  )
rain = read.csv2("Data/sixMinutePluvioAlteck2016.csv", header = F)
head(rain)
rain$V1 <- as.character(rain$V1)
rain$Date = as.POSIXct(strptime(rain$V1,
"%d/%m/%Y %H:%M", tz="EST") )
rain$DayMoYr = as.POSIXct(strptime(rain$V1,
"%d/%m/%Y", tz="EST")  )
sum(is.na(rain$Date))
naDates = rain[is.na(rain$Date == TRUE),]
rain = read.csv2("Data/sixMinutePluvioAlteck2016.csv", header = F)
head(rain)
rain$V1 <- as.character(rain$V1)
rain$Date = as.POSIXct(strptime(rain$V1,
"%d/%m/%Y %H:%M", tz="EST") )
rain$DayMoYr = as.POSIXct(strptime(rain$V1,
"%d/%m/%Y", tz="EST")  )
sum(is.na(rain$Date))
naDates = rain[is.na(rain$Date == TRUE),]
naDates
rain = read.csv2("Data/sixMinutePluvioAlteck2016.csv", header = F)
head(rain)
rain$V1 <- as.character(rain$V1)
rain$Date = as.POSIXct(strptime(rain$V1,
"%d/%m/%Y %H:%M", tz="EST") )
rain$DayMoYr = as.POSIXct(strptime(rain$V1,
"%d/%m/%Y", tz="EST")  )
# Check number of NA values
sum(is.na(rain$Date))
naDates = rain[is.na(rain$Date == TRUE),]
rainDay <- rain %>%
group_by(DayMoYr) %>%
dplyr::summarize(Rain.mm = sum(V2))
View(rainDay)
View(rainDay)
write.table(rainDay, "rain.tss", sep=",")
write.table(rainDay, "rain.tss", sep="\t", row.names = F)
rainDay$time = seq.int(nrow(rainDay))
rain_tss = rainDay[,c("time", "Rain.mm")]
View(rain_tss)
rain_tss[0] = "2016-03-25 to 2016-07-11"
rain_tss[0, 0] = "2016-03-25 to 2016-07-11"
rain_tss[1, 1] = "2016-03-25 to 2016-07-11"
rain_tss = rainDay[,c("time", "Rain.mm")]
rain_tss = rbind(c("2016-03-25 to 2016-07-11", NULL), rain_tss)
rain_tss = rbind(c("2016-03-25 to 2016-07-11", NA), rain_tss)
rainDay$time = seq.int(nrow(rainDay))
rain_tss = rainDay[,c("time", "Rain.mm")]
rain_tss = rbind(c("2016-03-25 to 2016-07-11", NA), rain_tss)
write.table(rainDay, "rain.tss", sep="\t", row.names = F)
write.table(rain_tss, "rain.tss", sep="\t", row.names = F)
rain = read.csv2("Data/sixMinutePluvioAlteck2016.csv", header = F)
head(rain)
rain$V1 <- as.character(rain$V1)
rain$Date = as.POSIXct(strptime(rain$V1,
"%d/%m/%Y %H:%M", tz="EST") )
rain$DayMoYr = as.POSIXct(strptime(rain$V1,
"%d/%m/%Y", tz="EST")  )
# Check number of NA values
sum(is.na(rain$Date))
naDates = rain[is.na(rain$Date == TRUE),]
rainDay <- rain %>%
group_by(DayMoYr) %>%
dplyr::summarize(Rain.mm = sum(V2))
rainDay$time = seq.int(nrow(rainDay))
rain_tss = rainDay[,c("time", "Rain.mm")]
#rain_tss = rbind(c("2016-03-25 to 2016-07-11", NA), rain_tss)
write.table(rain_tss, "rain.tss", sep="\t", row.names = F)
rainDay$time = seq.int(nrow(rainDay))
rain_tss = rainDay[,c("time", "Data/BEACH/Rain.mm")]
rain_tss = rainDay[,c("time", "/Data/BEACH/Rain.mm")]
rain_tss = rainDay[,c("time", "./Data/BEACH/Rain.mm")]
rainDay$time = seq.int(nrow(rainDay))
rain_tss = rainDay[,c("time", "Rain.mm")]
#rain_tss = rbind(c("2016-03-25 to 2016-07-11", NA), rain_tss)
write.table(rain_tss, "Data/BEACH/rain.tss", sep="\t", row.names = F)
rain = read.csv2("Data/sixMinutePluvioAlteck2016.csv", header = F)
head(rain)
rain$V1 <- as.character(rain$V1)
rain$Date = as.POSIXct(strptime(rain$V1,
"%d/%m/%Y %H:%M", tz="EST") )
rain$DayMoYr = as.POSIXct(strptime(rain$V1,
"%d/%m/%Y", tz="EST")  )
# Check number of NA values
sum(is.na(rain$Date))
naDates = rain[is.na(rain$Date == TRUE),]
rainDay <- rain %>%
group_by(DayMoYr) %>%
dplyr::summarize(Rain.mm = sum(V2))
CHECKO = F
if (CHECKO){
sum(is.na(rain$Date))
naDates = rain[is.na(rain$Date == TRUE),]
}
rainDay$Month <-
ifelse(rainDay$DayMoYr >= as.POSIXct("2016-03-24 00:30:00", tz = "EST") &
rainDay$DayMoYr < as.POSIXct("2016-04-01 00:00:00", tz = "EST"), "March",
ifelse(rainDay$DayMoYr >= as.POSIXct("2016-04-01 00:00:00", tz = "EST") &
rainDay$DayMoYr < as.POSIXct("2016-05-01 00:00:00", tz = "EST"), "April",
ifelse(rainDay$DayMoYr >= as.POSIXct("2016-05-01 00:00:00", tz = "EST") &
rainDay$DayMoYr < as.POSIXct("2016-06-01 00:00:00", tz = "EST"), "May",
ifelse(rainDay$DayMoYr >= as.POSIXct("2016-06-01 00:00:00", tz = "EST") &
rainDay$DayMoYr < as.POSIXct("2016-07-01 00:00:00", tz = "EST"), "June", "July" )
)
)
)
rainDay$Wet = ifelse(rainDay$Rain.mm > 0, 1, 0)
rainDay$Dry = ifelse(rainDay$Rain.mm == 0, 1, 0)
wet <- rainDay %>%
group_by(DayMoYr) %>%
dplyr::summarize(WetDays = sum(Wet))
View(wet)
wet <- rainDay %>%
group_by(Month) %>%
dplyr::summarize(WetDays = sum(Wet),
DryDays = sum(Dry))
wet$Prct = wet$WetDays/(wet$WetDays+wet$DryDays)
q = read.csv2("Data/hydroAlteck2016_smooth_R.csv")
head(q)
q$Date = as.POSIXct(strptime(q$DateCheck,
"%d/%m/%Y %H:%M"
, tz="EST")
)
q$DayMoYr = as.POSIXct(strptime(q$DateCheck,
"%d/%m/%Y"
, tz="EST")
)
sum(is.na(q$Date))
naDates = q[is.na(q$Date == TRUE),]
duplicateAlteck <- q[duplicated(q$DateCheck),]
head(duplicateAlteck)
head(duplicateAlteck)
View(q)
q$Vol2min <- q$Q.HW1*2/60
qDay <- q %>%
group_by(DayMoYr) %>%
dplyr::summarize(Q.m3 = sum(Vol2min))
View(qDay)
qDay$time = seq.int(nrow(qDay))
Disch_tss = q[,c("time", "Q.m3")]
Disch_tss = qDay[,c("time", "Q.m3")]
View(Disch_tss)
View(rainDay)
source("global.R")
source("global.R")
qDay$Q.mm = (qDay$Q.m3/catchment_area)*10^6
qDay$Q.mm = (qDay$Q.m3/catchment_area)*10^3
qDay$Month <-
ifelse(qDay$DayMoYr >= as.POSIXct("2016-03-24 00:30:00", tz = "EST") &
qDay$DayMoYr < as.POSIXct("2016-04-01 00:00:00", tz = "EST"), "March",
ifelse(qDay$DayMoYr >= as.POSIXct("2016-04-01 00:00:00", tz = "EST") &
qDay$DayMoYr < as.POSIXct("2016-05-01 00:00:00", tz = "EST"), "April",
ifelse(qDay$DayMoYr >= as.POSIXct("2016-05-01 00:00:00", tz = "EST") &
qDay$DayMoYr < as.POSIXct("2016-06-01 00:00:00", tz = "EST"), "May",
ifelse(qDay$DayMoYr >= as.POSIXct("2016-06-01 00:00:00", tz = "EST") &
qDay$DayMoYr < as.POSIXct("2016-07-01 00:00:00", tz = "EST"), "June", "July" )
)
)
)
wet <- rainDay %>%
group_by(Month) %>%
dplyr::summarize(WetDays = sum(Wet),
DryDays = sum(Dry),
MeanP = mean(Rain.mm))
View(wet)
wet <- rainDay %>%
group_by(Month) %>%
dplyr::summarize(WetDays = sum(Wet),
DryDays = sum(Dry),
MeanP = mean(Rain.mm),
StdP = sd(Rain.mm))
rainDay$Month <-
ifelse(rainDay$DayMoYr >= as.POSIXct("2016-03-24 00:30:00", tz = "EST") &
rainDay$DayMoYr < as.POSIXct("2016-04-01 00:00:00", tz = "EST"), "March",
ifelse(rainDay$DayMoYr >= as.POSIXct("2016-04-01 00:00:00", tz = "EST") &
rainDay$DayMoYr < as.POSIXct("2016-05-01 00:00:00", tz = "EST"), "April",
ifelse(rainDay$DayMoYr >= as.POSIXct("2016-05-01 00:00:00", tz = "EST") &
rainDay$DayMoYr < as.POSIXct("2016-06-01 00:00:00", tz = "EST"), "May",
ifelse(rainDay$DayMoYr >= as.POSIXct("2016-06-01 00:00:00", tz = "EST") &
rainDay$DayMoYr < as.POSIXct("2016-07-01 00:00:00", tz = "EST"), "June", "July" )
)
)
)
rainDay$Wet = ifelse(rainDay$Rain.mm > 0, 1, 0)
rainDay$Dry = ifelse(rainDay$Rain.mm == 0, 1, 0)
wet <- rainDay %>%
group_by(Month) %>%
dplyr::summarize(WetDays = sum(Wet),
DryDays = sum(Dry),
MeanP = mean(Rain.mm),
StdP = sd(Rain.mm),
TotP = sum(Rain.mm))
wet$Prct = wet$WetDays/(wet$WetDays+wet$DryDays)
dischSumm <- qDay %>%
group_by(Month) %>%
dplyr::summarize(MeanQmm = mean(Q.mm),
MeanQm3 = mean(Q.m3))
View(dischSumm)
dischSumm$Check = (MeanQm3/catchmment_area)*10^3
dischSumm$Check = (dischSumm$MeanQm3/catchmment_area)*10^3
dischSumm$Check = (dischSumm$MeanQm3/catchment_area)*10^3
dischSumm <- qDay %>%
group_by(Month) %>%
dplyr::summarize(MeanQmm = mean(Q.mm),
SdevQmm = sd(Q.mm),
MeanQm3 = mean(Q.m3))
etp = read.csv2("Data/ZornDaily.csv")
head(etp)
etp = read.csv2("Data/ZornDaily.csv", sep = ",")
head(etp)
View(etp)
etp$DayMoYr = as.POSIXct(strptime(etp$DateCheck, "%m/%d/%y", tz="EST"))
etp$DATE = as.character(etp$DATE)
etp$DayMoYr = as.POSIXct(strptime(etp$DATE, "%m/%d/%y", tz="EST"))
rainDay$Month <-
ifelse(rainDay$DayMoYr >= as.POSIXct("2016-03-24 00:30:00", tz = "EST") &
rainDay$DayMoYr < as.POSIXct("2016-04-01 00:00:00", tz = "EST"), "March",
ifelse(rainDay$DayMoYr >= as.POSIXct("2016-04-01 00:00:00", tz = "EST") &
rainDay$DayMoYr < as.POSIXct("2016-05-01 00:00:00", tz = "EST"), "April",
ifelse(rainDay$DayMoYr >= as.POSIXct("2016-05-01 00:00:00", tz = "EST") &
rainDay$DayMoYr < as.POSIXct("2016-06-01 00:00:00", tz = "EST"), "May",
ifelse(rainDay$DayMoYr >= as.POSIXct("2016-06-01 00:00:00", tz = "EST") &
rainDay$DayMoYr < as.POSIXct("2016-07-01 00:00:00", tz = "EST"), "June", "July" )
)
)
)
rainDay$Wet = ifelse(rainDay$Rain.mm > 0, 1, 0)
rainDay$Dry = ifelse(rainDay$Rain.mm == 0, 1, 0)
rainSumm <- rainDay %>%
group_by(Month) %>%
dplyr::summarize(WetDays = sum(Wet),
DryDays = sum(Dry),
MeanP = mean(Rain.mm),
StdP = sd(Rain.mm),
TotP = sum(Rain.mm))
rainSumm$Prct = rainSumm$WetDays/(rainSumm$WetDays+rainSumm$DryDays)
View(rainSumm)
