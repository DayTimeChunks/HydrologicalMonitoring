scale_x_datetime(limits = lims, breaks = date_breaks("2 weeks"), labels = date_format("%b %d")) +
geom_line(aes(y = Q.mm.y),
color = "blue") +
# Create a second axis with sec_axis() and format the labels to display the original precipitation units.
# ylab(expression(atop("Conc. S-met ", paste({({mu}*g / L)} )))) +
scale_y_continuous(name = expression(atop("Discharge", paste({({mm}/d)} ))),
sec.axis = sec_axis(trans = ~-1*(.-maxRange), # Equivalent to: y2 = -1*(y1 - maxRange)
name = expression(atop("Precipitation", paste("(mm/d)"))) # ,
)
# labels = precip_labels) # x here is = precip_cuft
)
ggplot(data = d[!is.na(d$Q.mm.y),], aes(x = Date)) +
theme_minimal() +
# Use geom_tile to create the inverted hyetograph. geom_tile has a bug that displays a warning message for height and width, you can ignore it.
geom_tile(aes(y = -1*(Rain.mm.y/2-maxRange), # y = the center point of each bar, as geom_tile uses variable as center point
height = Rain.mm.y,
width = 1
),
fill = "gray50",
color = "forestgreen") +
theme(# axis.text.x=element_text(angle = 45, hjust = 1)
# axis.text.x=element_blank(),
axis.title.x=element_blank()
#legend.position="top"
)+
scale_x_datetime(limits = lims, breaks = date_breaks("2 weeks"), labels = date_format("%b %d")) +
geom_line(aes(y = Q.mm.y),
color = "blue") +
# Create a second axis with sec_axis() and format the labels to display the original precipitation units.
# ylab(expression(atop("Conc. S-met ", paste({({mu}*g / L)} )))) +
scale_y_continuous(name = expression(atop("Discharge", paste("(mm/d)"))),
sec.axis = sec_axis(trans = ~-1*(.-maxRange), # Equivalent to: y2 = -1*(y1 - maxRange)
name = expression(atop("Precipitation", paste("(mm/d)"))) # ,
)
# labels = precip_labels) # x here is = precip_cuft
)
hy <- ggplot(data = d[!is.na(d$Q.mm.y),], aes(x = Date)) +
theme_minimal() +
# Use geom_tile to create the inverted hyetograph. geom_tile has a bug that displays a warning message for height and width, you can ignore it.
geom_tile(aes(y = -1*(Rain.mm.y/2-maxRange), # y = the center point of each bar, as geom_tile uses variable as center point
height = Rain.mm.y,
width = 1
),
fill = "gray50",
color = "forestgreen") +
theme(# axis.text.x=element_text(angle = 45, hjust = 1)
# axis.text.x=element_blank(),
axis.title.x=element_blank()
#legend.position="top"
)+
scale_x_datetime(limits = lims, breaks = date_breaks("2 weeks"), labels = date_format("%b %d")) +
geom_line(aes(y = Q.mm.y),
color = "blue") +
# Create a second axis with sec_axis() and format the labels to display the original precipitation units.
# ylab(expression(atop("Conc. S-met ", paste({({mu}*g / L)} )))) +
scale_y_continuous(name = expression(atop("Discharge", paste("(mm/d)"))),
sec.axis = sec_axis(trans = ~-1*(.-maxRange), # Equivalent to: y2 = -1*(y1 - maxRange)
name = expression(atop("Precipitation", paste("(mm/d)"))) # ,
)
# labels = precip_labels) # x here is = precip_cuft
)
hy
names(ch)
ch$Event = na.locf(ch$Event)
ch$Event = as.factor(ch$Event)
ch$Season = ifelse(ch$Date > as.POSIXct('2016-05-25 00:06:00', tz = 'EST'), "Late", "Early")
tags = FALSE
out_dates = ggplot(data = ch,
aes(x = Date, y = Conc.mug.L)) +
geom_errorbar(aes(ymin = Conc.mug.L - Conc.SD, ymax = Conc.mug.L + Conc.SD, colour = Season)) +
geom_point(aes(group = Event, colour = Season)) +
theme_minimal() +
ylab(expression(atop("Conc. S-met ", paste({({mu}*g / L)} )))) +
scale_y_continuous( breaks = c(28, 24, 20, 16, 12, 8, 4, 0), limits = c(0, 28) ) +
# Smooth linear models
geom_smooth(data=subset(ch[2203:43539, ]), method = "lm", formula = y ~ x, se = F,  linetype="dashed") +
geom_smooth(data=subset(ch[43539:nrow(ch)-1000, ]), method = "lm", formula = y ~ x, se= F,  linetype="dashed") +
scale_x_datetime(limits = lims, breaks = date_breaks("2 weeks"), labels = date_format("%b %d")) +
guides(col = guide_legend(nrow = 2, title.position = "top"))
out = out_dates +
theme(# axis.text.x=element_text(angle = 45, hjust = 1) ,
# axis.text.x=element_blank(),
axis.title.x=element_blank(),
legend.position="right"
)
if (tags){
out + geom_text_repel(aes(label=Events), # WeekSubWeek or Weeks
size = 3,
arrow = arrow(length = unit(0.005, 'npc'), type = "closed"),
force = 0.5,
point.padding = unit(0.5, 'lines'),
max.iter = 2e3,
nudge_x = .05, show.legend = F)
}
out_dates
Sys.setlocale("LC_ALL", "English")
library(dplyr)
library(tidyr)
library(zoo)
library(reshape)
library(ggplot2)
library("ggrepel")
library("plotly")
library("cowplot")
library("gridExtra")
library("Cairo")
library("GGally")
library("scales")
library("plotKML")
# getwd()
# setwd("D:/Documents/these_pablo/Alteckendorf2016/HydrologicalMonitoring")
# Discharge and 2 min rainfall
hydro = read.csv2("Data/groupAlteck2016_R.csv")
# hydro2 = read.csv2("Data/groupAlteck2016_Rshiny.csv")
hydro$Date = as.POSIXct(strptime(hydro$DateCheck.S,
"%d/%m/%Y %H:%M", tz="EST") )
# names(hydro)
qra <- hydro[, c("Date", "Q.HW1", "Rain.mm")]
# Outlet Concentrations
aodf = read.csv2("Data/WeeklyHydroContam_R.csv")
# names(aodf)
c = aodf[, c("ti", "Conc.mug.L" ,  "Conc.SD" , "Event", "Events")]
c$ti <- as.POSIXct(strptime(c$ti, "%Y-%m-%d %H:%M", tz="EST"))
sum(is.na(c$ti)) == 0
# Discharge and concentrations
ch = merge(qra, c, by.x = "Date", by.y="ti", all = T)
# Transect soils
weeklySoil = read.csv2("Data/WeeklySoils_Rng.csv", na.strings=c('#DIV/0!', '', 'NA'), header = TRUE)
weeklySoil$Date.ti <- as.POSIXct(strptime(weeklySoil$Date.ti, "%Y-%m-%d %H:%M", tz="EST"))
sum(is.na(weeklySoil$Date.ti))
# weeklySoil$Conc.ComSoil.SD <-
#  ifelse(weeklySoil$Conc.ComSoil.SD == as.character("#DIV/0!"), NA, as.numeric(as.character(weeklySoil$Conc.ComSoil.SD)))
# weeklySoil = weeklySoil %>%
#  group_by(Transect) %>%
#  arrange(Transect, Wnum)
# names(weeklySoil)
ch$Rain.mm = ifelse(is.na(ch$Rain.mm), 0, ch$Rain.mm)
# ch$Rain.mm = round(ch$Rain.mm, 0)
ch$Q.HW1 = ifelse(is.na(ch$Q.HW1), 0, ch$Q.HW1)
# Catchment area
area <- 47*10**4 # [m2]
ch$precip_m3 = ch$Rain.mm/10^3 * area
sum(is.na(ch$precip_m3))
sum(is.na(ch$Q.HW1))
# Calculate the range needed to avoid having your hyetograph and hydrograph overlap
maxRange <- 1*(max(ch$precip_m3) + max(ch$Q.HW1)) - 800
# Create a function to backtransform the axis labels for precipitation
precip_labels <- function(x) {round( ((x / area) * 10^3), digits = 0) } # X will be precip_m3 -> convert to mm
lims <- as.POSIXct(strptime(c("2016-03-25 00:04:00","2016-07-12 01:00:00"), format = "%Y-%m-%d %H:%M"))
# Plot the data
hy = ggplot(data = ch,
aes(x = Date)) +
theme_minimal() +
# Use geom_tile to create the inverted hyetograph. geom_tile has a bug that displays a warning message for height and width, you can ignore it.
geom_tile(aes(y = -1*(precip_m3/2-maxRange), # y = the center point of each bar, as geom_tile uses variable as center point
height = precip_m3,
width = 1
),
fill = "gray50",
color = "forestgreen") +
theme(# axis.text.x=element_text(angle = 45, hjust = 1)
# axis.text.x=element_blank(),
axis.title.x=element_blank()
#legend.position="top"
)+
scale_x_datetime(limits = lims, breaks = date_breaks("2 weeks"), labels = date_format("%b %d")) +
# Plot your discharge data
geom_line(aes(y = Q.HW1),
color = "blue") +
# Create a second axis with sec_axis() and format the labels to display the original precipitation units.
# ylab(expression(atop("Conc. S-met ", paste({({mu}*g / L)} )))) +
scale_y_continuous(name = expression(atop("Discharge", paste({({m^3}/h)} ))),
sec.axis = sec_axis(trans = ~-1*(.-maxRange), # Equivalent to: y2 = -1*(y1 - maxRange)
name = expression(atop("Precipitation", paste("(mm)"))),
labels = precip_labels)) # x here is = precip_cuft
hy
lims <- as.POSIXct(strptime(c("2016-03-25 00:04:00","2016-07-12 01:00:00"), format = "%Y-%m-%d %H:%M"))
# Create a function to backtransform the axis labels for precipitation
precip_labels <- function(x) {round( ((x / area) * 10^3), digits = 0) } # X will be precip_m3 -> convert to mm
q = hydro[ , c("Date", "DateCheck", "Q.HW1", "DayMoYr", "Vol2min", "Rain.mm")]
q$Q.mm = q$Vol2min*10**3/(47*10**4)
qmDay <- q %>%
group_by(DayMoYr) %>%
dplyr::summarize(Q.mm = sum(Q.mm),
Rain.mm = sum(Rain.mm)
)
qmDay$DayMoYr = as.character(qmDay$DayMoYr)
qmDay$Date = as.POSIXct(strptime(qmDay$DayMoYr,
"%Y-%m-%d", tz="EST") )
qmDay$Date = qmDay$Date + 12*60*60
qmDay$DayMoYr = NULL
day = merge(q, qmDay, by = "Date", all = T)
d = day[, c("Date", "Q.mm.y", "Rain.mm.y")]
ggplot(data= d) +
geom_line(data = d[!is.na(d$Q.mm.y),], aes(x = Date, y = Q.mm.y))+
scale_x_datetime(limits = lims, breaks = date_breaks("2 weeks"), labels = date_format("%b %d"))
# Calculate the range needed to avoid having your hyetograph and hydrograph overlap
maxRange <- 1*(max(d$Rain.mm.y, na.rm = T) + max(d$Q.mm.y, na.rm = T)) # - 800
hy <- ggplot(data = d[!is.na(d$Q.mm.y),], aes(x = Date)) +
theme_minimal() +
# Use geom_tile to create the inverted hyetograph. geom_tile has a bug that displays a warning message for height and width, you can ignore it.
geom_tile(aes(y = -1*(Rain.mm.y/2-maxRange), # y = the center point of each bar, as geom_tile uses variable as center point
height = Rain.mm.y,
width = 1
),
fill = "gray50",
color = "forestgreen") +
theme(# axis.text.x=element_text(angle = 45, hjust = 1)
# axis.text.x=element_blank(),
axis.title.x=element_blank()
#legend.position="top"
)+
scale_x_datetime(limits = lims, breaks = date_breaks("2 weeks"), labels = date_format("%b %d")) +
geom_line(aes(y = Q.mm.y),
color = "blue") +
# Create a second axis with sec_axis() and format the labels to display the original precipitation units.
# ylab(expression(atop("Conc. S-met ", paste({({mu}*g / L)} )))) +
scale_y_continuous(name = expression(atop("Discharge", paste("(mm/d)"))),
sec.axis = sec_axis(trans = ~-1*(.-maxRange), # Equivalent to: y2 = -1*(y1 - maxRange)
name = expression(atop("Precipitation", paste("(mm/d)"))) # ,
)
# labels = precip_labels) # x here is = precip_cuft
)
hy
names(ch)
ch$Event = na.locf(ch$Event)
ch$Event = as.factor(ch$Event)
ch$Season = ifelse(ch$Date > as.POSIXct('2016-05-25 00:06:00', tz = 'EST'), "Late", "Early")
tags = FALSE
out_dates = ggplot(data = ch,
aes(x = Date, y = Conc.mug.L)) +
geom_errorbar(aes(ymin = Conc.mug.L - Conc.SD, ymax = Conc.mug.L + Conc.SD, colour = Season)) +
geom_point(aes(group = Event, colour = Season)) +
theme_minimal() +
ylab(expression(atop("Conc. S-met ", paste({({mu}*g / L)} )))) +
scale_y_continuous( breaks = c(28, 24, 20, 16, 12, 8, 4, 0), limits = c(0, 28) ) +
# Smooth linear models
geom_smooth(data=subset(ch[2203:43539, ]), method = "lm", formula = y ~ x, se = F,  linetype="dashed") +
geom_smooth(data=subset(ch[43539:nrow(ch)-1000, ]), method = "lm", formula = y ~ x, se= F,  linetype="dashed") +
scale_x_datetime(limits = lims, breaks = date_breaks("2 weeks"), labels = date_format("%b %d")) +
guides(col = guide_legend(nrow = 2, title.position = "top"))
out = out_dates +
theme(# axis.text.x=element_text(angle = 45, hjust = 1) ,
# axis.text.x=element_blank(),
axis.title.x=element_blank(),
legend.position="right"
)
if (tags){
out + geom_text_repel(aes(label=Events), # WeekSubWeek or Weeks
size = 3,
arrow = arrow(length = unit(0.005, 'npc'), type = "closed"),
force = 0.5,
point.padding = unit(0.5, 'lines'),
max.iter = 2e3,
nudge_x = .05, show.legend = F)
}
out_dates
weeklySoil$Transect = as.character(weeklySoil$Transect)
weeklySoil$Transect = ifelse(weeklySoil$Transect == "N", "North",
ifelse(weeklySoil$Transect == "T", "Valley",
ifelse(weeklySoil$Transect == "S", "South", NA)
)
)
weeklySoil$Transect <- factor(weeklySoil$Transect, levels = c("North", "Valley", "South"))
levels( weeklySoil$Transect)
#, fig.height=3, fig.width=3}
lb1a2 <- paste("App.")
lbW012 <- paste("App.W0/1/2")
lbW9 <- paste("App.W9")
limits_conc_soil <- aes(ymin=Conc.mug.g.dry.soil-Conc.ComSoil.SD,  ymax=Conc.mug.g.dry.soil+Conc.ComSoil.SD)
#limits_conc_soil <- aes(ymin=mean-0.5, ymax=mean+0.5)
pd <- position_dodge(0.5) # move them .05 to the left and right
# xlims = xlim(as.POSIXct('2016-03-25 00:04:00', tz = 'EST'), as.POSIXct('2016-07-12 01:00:00', tz = 'EST') )
tags = FALSE
lila = "#C77CFF"
#blue = "#00BFC4"
blue = "#619CFF"
green = "#00BA38"
co = ggplot(weeklySoil[4:48, ],
aes(x=Date.ti, y=Conc.mug.g.dry.soil, colour=Transect, group = Transect)) +
geom_point() +
geom_line() +
# Error bars
geom_errorbar(limits_conc_soil, width=.1, position=pd) +
# scale_y_continuous(limits=c(0,10),oob = rescale_none) +
# Themes and axes
theme_minimal() +
theme(legend.position = "right",
# axis.text.x=element_text(angle = 45, hjust = 1),
# axis.text.x=element_blank(),
axis.title.x=element_blank()
) +
ylab(expression(atop("Conc. S-met ", paste({({mu}*g / g.soil.dry)} )))) +
# facet_wrap(~Transect, nrow = 3) +
# xlab("Date") +
# theme() +
# scale_x_datetime(breaks = date_breaks("1 weeks"), labels = date_format("%b %d")) +
# Smooth linear models
# stat_smooth(method = "lm", formula = y ~ poly(x, 2)) +
# stat_smooth(method = "lm") +
# Text
# W0 Application
# annotate("text", x = as.POSIXct('2016-03-25 08:04:00'), y = 4, label = lb1a2, parse = T, size = 3.0) +
geom_segment(aes(x = as.POSIXct('2016-04-14 08:04:00'),
y = 0.5,
xend = as.POSIXct('2016-03-26 01:04:00'), yend = -0), color = "black",
arrow = arrow(length = unit(0.2, "cm"))) +
# W1 Application
#geom_segment(aes(x = as.POSIXct('2016-04-14 08:04:00'), y = 0.5,
#                 xend = as.POSIXct('2016-04-05 08:04:00'), yend = 0), color = "black",
#             arrow = arrow(length = unit(0.2, "cm"))) +
# W2 Application
annotate("text", x = as.POSIXct('2016-04-15 08:04:00'), y = 1, label = lb1a2, parse = T, size = 3.0) +
geom_segment(aes(x = as.POSIXct('2016-04-14 08:04:00'), y = 0.5,
xend = as.POSIXct('2016-04-13 08:04:00'), yend = 0), color = "black",
arrow = arrow(length = unit(0.2, "cm"))) +
# W9 Application
annotate("text", x = as.POSIXct('2016-05-26 08:04:00'), y = 4.5, label = lb1a2, parse = T, size = 3.0) +
geom_segment(aes(x = as.POSIXct('2016-05-26 08:04:00'), y = 4,
xend = as.POSIXct('2016-05-26 08:04:00'), yend = 0), color = "black",
arrow = arrow(length = unit(0.2, "cm"))) +
guides(col = guide_legend(nrow = 3, title.position = "top")) +
scale_x_datetime(limits = lims, breaks = date_breaks("2 weeks"), labels = date_format("%b %d")) +
scale_color_manual(name= "Transect",
values = c(lila, green, blue),
breaks=c("North" , "Valley" ,"South"),
labels=c("North" , "Valley" ,"South")
)
if (tags){
co + geom_text_repel(aes(label=as.factor(Wnum)),
size = 3,
arrow = arrow(length = unit(0.005, 'npc'), type = "closed"),
force = 0.5,
point.padding = unit(0.5, 'lines'),
max.iter = 2e3,
nudge_x = .05,
show.legend = F)
}
co
# Linear model
# ggsave(co, filename = "CompositeConcLM.png", width = 7, height = 5, units = "in", scale = 1)
## ggsave(co, filename = "CompositeConcLM.tiff", height = 10, width = 8.7, units = 'cm')
# No linear model
# ggsave(co, filename = "CompositeConc.png", width = 7, height = 5, units = "in", scale = 1)
moltenSoil = read.csv2("Data/moltenDB_R.csv", header = TRUE, sep = ",", dec = ".")
moltenSoil$Date = as.POSIXct(moltenSoil$Date, "%Y-%m-%d %H:%M", tz = "EST")
moltenSoil$DB_max = ifelse(moltenSoil$DB_max < 0, NA, moltenSoil$DB_max)
moltenSoil$DB_max = ifelse(moltenSoil$DB_max > 2, NA, moltenSoil$DB_max)
mSoils = melt(moltenSoil, id=c("Date", "Transect"))
mSoils$Transect = as.character(mSoils$Transect)
mSoils$Transect = ifelse(mSoils$Transect == "N", "North",
ifelse(mSoils$Transect == "T", "Valley",
ifelse(mSoils$Transect == "S", "South", NA)
)
)
mSoils$Transect <- factor(mSoils$Transect, levels = c("North", "Valley", "South"))
levels( mSoils$Transect)
DBLeg = ggplot(data = mSoils , aes(x=Date, y=value, shape=variable))+
geom_point(data=subset(mSoils, variable == 'DB_lab')) +
geom_point(data=subset(mSoils, variable == 'DB_max')) +
theme_minimal() +
guides(shape=guide_legend(title=("D*/B*"),
order = 2,
nrow=2,
title.position = "top" #,
# keyheight = 1.5,
# title.vjust = NULL, label.vjust = NULL
)) +
ylab(expression(atop("D*/B*"))) +
# facet_wrap(~Transect, nrow = 3) +
xlab("Date") +
scale_x_datetime(limits = lims, breaks = date_breaks("2 weeks"), labels = date_format("%b %d")) +
scale_color_manual(name= "Transect",
values = c(lila, green, blue),
breaks=c("North" , "Valley" ,"South"),
labels=c("North" , "Valley" ,"South")
)
db_leg = get_legend(DBLeg)
DB = ggplot(data = mSoils , aes(x=Date, y=value, colour=Transect, shape=variable))+
geom_line(data=subset(mSoils, variable == 'DB_lab')) +
geom_point(data=subset(mSoils, variable == 'DB_lab')) +
geom_point(data=subset(mSoils, variable == 'DB_max')) +
theme_minimal() +
guides(shape=guide_legend(title=("D*/B* Scenario"),
order = 2,
nrow=2,
title.position = "top" #,
# keyheight = 1.5,
# title.vjust = NULL, label.vjust = NULL
)) +
ylab(expression(atop("D*/B*"))) +
# facet_wrap(~Transect, nrow = 3) +
xlab("Date") +
scale_x_datetime(limits = lims, breaks = date_breaks("2 weeks"), labels = date_format("%b %d"))+
scale_color_manual(name= "Transect",
values = c(lila, green, blue),
breaks=c("North" , "Valley" ,"South"),
labels=c("North" , "Valley" ,"South")
)
DB
hy_noLeg <- hy + theme(legend.position = 'none')
out_noLeg = out +  theme(legend.position = 'none')
co_noLeg = co +  theme(legend.position = 'none')
out_leg <- get_legend(out)
co_leg <- get_legend(co)
db_noLeg = DB + theme(legend.position = 'none')
grid3 = plot_grid(
hy_noLeg,
out_noLeg,
co_noLeg,
db_noLeg,
# sources_noLeg,
ncol = 1,
align = 'v')
ml3 = ggdraw() +
draw_plot(grid3, x=0.02, y = 0.0, width = 0.95, height = .95) +
draw_plot(out_leg, x=(0.54 ), y = 0.56, width = .8, height = 0.1) +
draw_plot(co_leg, x=(0.54 ), y = 0.32, width = .8, height = 0.1) +
draw_plot(db_leg, x=(0.54) , y = 0.08, width = .8, height = 0.1) +
draw_label("A", x= 0.94, y = .93, size = 12, fontface = "bold") +
draw_label("B", x= 0.94, y = .69, size = 12, fontface = "bold") +
draw_label("C", x= 0.94, y = .47, size = 12, fontface = "bold") +
draw_label("D", x= 0.94, y = .23, size = 12, fontface = "bold")
ml3
SAVE = T
PC = T
if (SAVE){
if (PC){
ggsave(ml3,
filename = "D:/Documents/these_pablo/WriteUp/Images/multilevel4.pdf",
device = "pdf", dpi = 600,  scale = 1, # )# ,
width = 7, height = 10)
} else {
ggsave(ml3,
filename = "/Users/DayTightChunks/Documents/PhD/Writeups/Journals/WaterResearch/images/multilevel4.pdf",
device=cairo_pdf, dpi = 600,  scale = 1, # )# ,
width = 7, height = 10)
}
}
ggsave(ml3, filename = "D:/Documents/these_pablo/WriteUp/Images/multilevel4.png", width = 7, height = 10, units = "in", scale = 1)
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning = F)
Sys.setlocale("LC_ALL", "English")
# Import lab values
source("global.R")
library(sm)
library(vioplot)
library(dplyr)
library(tidyr)
library(zoo)
library(reshape)
library(ggplot2)
library("ggrepel")
library("plotly")
library("cowplot")
library("gridExtra")
library("Cairo")
library("GGally")
library("scales")
library("plotKML")
# Stats
library("vegan")
library("cluster")
c = c(5, 10, 20, 35, 50, 5, 10, 20, 35, 50)
sh = c(0.993, 1.000, -0.179, 1.184, 0.810, 0.732, 0.566, 0.831, 1.008, 0.704)
cor.test(c, sh)
mQ = c(-0.118, -0.497, -0.203, -0.432, 1.062, -0.114)
mean(mQ)
envW = c(1.218, 0.966, 0.422, -0.131)
mean(c(envW, mQ))
# If P < 0.05, reject the null hypothesis that u1 = u2.
wilcox.test(mQ, envW, paired = F)
paddy = c(-1.468, 0.572, -0.033, 0.378, -0.297, -0.918, 1.500, -1.047, 0.052, -0.186)
rouff = c(1.620, 1.520, 1.773, 1.534, 1.217, 0.021, 1.361, 1.170, 1.328, 1.194)
mean(paddy)
sd(paddy)
# If P < 0.05, reject the null hypothesis that u1 = u2.
wilcox.test(paddy, rouff, paired = T)
alteck = c(0.993, 1.000, -0.179, 1.184, 0.810, 0.732, 0.566, 0.831, 1.008, 0.704)
mean(alteck)
# If P < 0.05, reject the null hypothesis that u1 = u2.
wilcox.test(paddy, alteck, paired = T)
wilcox.test(rouff, alteck, paired = T)
# Computed in "global.R"
propagatedError
# Import raw data
enrich = read.csv2('Data/EnrichmentExp.csv', sep = ";", dec = ".", header = T)
enrich = subset(enrich, Temp == 20)
enrich$Type = as.character(enrich$Type)
# Initial mean concentration
inital = subset(enrich, Days == 1 ) # & Type == "Biotic")
iConc = mean(inital$C.SM)
# Iniital Delta in deg experiment
iniDelta = mean(inital$Delta)
enrich$DD13 <- enrich$Delta - initialDelta
enrich$DD13m <- enrich$Delta - iniDelta
abiotic = subset(enrich, Type == "Abiotic" & Temp == 20)
biotic = subset(enrich, Type == "Biotic" & Temp == 20)
View(enrich)
enrich = read.csv2('Data/EnrichmentExp.csv', sep = ";", dec = ".", header = T)
# Import raw data
enrich = read.csv2('Data/EnrichmentExp.csv', sep = ";", dec = ".", header = T)
enrich = subset(enrich, Temp == 20)
enrich$Type = as.character(enrich$Type)
# Initial mean concentration
inital = subset(enrich, Days == 1 ) # & Type == "Biotic")
iConc = mean(inital$C.SM)
# Iniital Delta in deg experiment
iniDelta = mean(inital$Delta)
enrich$DD13 <- enrich$Delta - initialDelta
enrich$DD13m <- enrich$Delta - iniDelta
abiotic = subset(enrich, Type == "Abiotic" & Temp == 20)
biotic = subset(enrich, Type == "Biotic" & Temp == 20)
